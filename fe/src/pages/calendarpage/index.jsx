import React, { useState, useEffect } from 'react';
import AppointmentRepository from '../../api/apiAppointment';
import './styles.scss';

const hours = [
    '8:00 AM', '9:00 AM', '10:00 AM', '11:00 AM', '12:00 PM', '1:00 PM',
    '2:00 PM', '3:00 PM', '4:00 PM', '5:00 PM', '6:00 PM', '7:00 PM'
];

// H√†m n√†y s·∫Ω tr·∫£ v·ªÅ ch·ªâ s·ªë c·ªßa ng√†y trong tu·∫ßn (1-6 cho th·ª© 2 ƒë·∫øn th·ª© 7, 0 cho ch·ªß nh·∫≠t)
const getDayIndex = (date) => {
    const day = new Date(date).getDay();
    if (day === 0) return null; // Ch·ªß nh·∫≠t kh√¥ng bao g·ªìm
    return day - 1; // Chuy·ªÉn Ch·ªß nh·∫≠t (0) th√†nh null v√† c√°c ng√†y kh√°c t·ª´ 1 ƒë·∫øn 6
};

const DashboardLayout = () => {
    const [appointments, setAppointments] = useState([]);
    const [scheduleGrid, setScheduleGrid] = useState(Array(6).fill(Array(12).fill(null)));
    const [hoveredAppointment, setHoveredAppointment] = useState(null);
    const [selectedAppointment, setSelectedAppointment] = useState(null);
    const [popupPosition, setPopupPosition] = useState({ top: 0, left: 0 });

    useEffect(() => {
        // Fetch appointments from API
        const fetchAppointments = async () => {
            try {
                const response = await AppointmentRepository.getAppointments();
                setAppointments(response.results); // L∆∞u danh s√°ch cu·ªôc h·∫πn t·ª´ API
            } catch (error) {
                console.error("Error fetching appointments:", error);
            }
        };

        fetchAppointments();
    }, []);

    useEffect(() => {
        // C·∫≠p nh·∫≠t l·∫°i l·ªãch sau khi ƒë√£ l·∫•y cu·ªôc h·∫πn
        const newScheduleGrid = Array(6).fill().map(() => Array(12).fill(null)); // Kh·ªüi t·∫°o m·∫£ng l·ªãch tr·ªëng

        appointments.forEach((appointment) => {
            const dayIndex = getDayIndex(appointment.appointment_date); // L·∫•y ch·ªâ s·ªë ng√†y trong tu·∫ßn t·ª´ ng√†y cu·ªôc h·∫πn
            if (dayIndex !== null) {
                // Chuy·ªÉn th·ªùi gian cu·ªôc h·∫πn th√†nh gi·ªù v√† ph√∫t
                const appointmentDate = new Date(appointment.appointment_date);
                const appointmentStartTime = appointmentDate.getHours(); // L·∫•y gi·ªù t·ª´ th·ªùi gian cu·ªôc h·∫πn

                // T√¨m v·ªã tr√≠ trong m·∫£ng gi·ªù (m·ªói gi·ªù t∆∞∆°ng ·ª©ng v·ªõi 1 d√≤ng trong b·∫£ng)
                const hourIndex = hours.findIndex(hour => parseInt(hour.split(':')[0], 10) === appointmentStartTime);
                if (hourIndex !== -1) {
                    newScheduleGrid[dayIndex][hourIndex] = appointment; // ƒêi·ªÅn cu·ªôc h·∫πn v√†o ƒë√∫ng v·ªã tr√≠ trong b·∫£ng
                }
            }
        });

        setScheduleGrid(newScheduleGrid); // C·∫≠p nh·∫≠t l·∫°i state ƒë·ªÉ render l·ªãch
    }, [appointments]);

    const handleMouseEnter = (event, appointmentDetails) => {
        if (!selectedAppointment) {
            const { clientX, clientY } = event;
            const popupWidth = 200;  // Chi·ªÅu r·ªông c·ªßa popup
            const popupHeight = 150; // Chi·ªÅu cao c·ªßa popup (c√≥ th·ªÉ thay ƒë·ªïi)
            const windowWidth = window.innerWidth;  // Chi·ªÅu r·ªông c·ª≠a s·ªï tr√¨nh duy·ªát
            const windowHeight = window.innerHeight; // Chi·ªÅu cao c·ª≠a s·ªï tr√¨nh duy·ªát
            const popupMargin = 10;  // Kho·∫£ng c√°ch t·ª´ chu·ªôt ƒë·∫øn popup

            // Ki·ªÉm tra v·ªã tr√≠ b√™n ph·∫£i c·ªßa popup
            let adjustedLeft = clientX + popupMargin;
            if (clientX + popupWidth + popupMargin > windowWidth) {
                // N·∫øu popup v∆∞·ª£t ra ngo√†i c·ª≠a s·ªï, ƒëi·ªÅu ch·ªânh sang tr√°i
                adjustedLeft = clientX - popupWidth - popupMargin;
            }

            // Ki·ªÉm tra v·ªã tr√≠ ph√≠a d∆∞·ªõi c·ªßa popup
            let adjustedTop = clientY + popupMargin;
            if (clientY + popupHeight + popupMargin > windowHeight) {
                // N·∫øu popup v∆∞·ª£t ra ngo√†i d∆∞·ªõi c·ªßa m√†n h√¨nh, ƒëi·ªÅu ch·ªânh l√™n tr√™n
                adjustedTop = clientY - popupHeight - popupMargin;
            }

            setPopupPosition({
                top: adjustedTop,
                left: adjustedLeft,
            });

            setHoveredAppointment(appointmentDetails);  // C·∫≠p nh·∫≠t cu·ªôc h·∫πn khi hover
        }
    };




    const handleMouseLeave = () => {
        if (!selectedAppointment) {
            setHoveredAppointment(null);
        }
    };

    const handleClick = (event, appointmentDetails) => {
        const { clientX, clientY } = event;
        setPopupPosition({ top: clientY + 10, left: clientX + 10 });
        setSelectedAppointment(appointmentDetails);
        setHoveredAppointment(null);
    };

    const closePopup = () => {
        setSelectedAppointment(null);
    };

    return (
        <div className="dashboard">
            <aside className="dashboard__sidebar">
                <section className="dashboard__weekly-activity">
                    <h3>HO·∫†T ƒê·ªòNG TRONG TU·∫¶N</h3>
                    <div className="weekly-stats">
                        <div className="stat-item">
                            <p>L∆Ø·ª¢T XEM /TU·∫¶N</p>
                            <p className="stat-number">120</p>
                        </div>
                        <div className="stat-item">
                            <p>L∆Ø·ª¢T XEM /NG√ÄY</p>
                            <p className="stat-number">20</p>
                        </div>
                    </div>
                </section>
                <section className="dashboard__appointment-summary">
                    <h3>L·ªäCH KH√ÅM</h3>
                    <div className="appointment-stats">
                        <div className="stat-item">
                            <p>B·ªÜNH NH√ÇN M·ªöI</p>
                            <p className="stat-number">50</p>
                        </div>
                        <div className="stat-item">
                            <p>B·ªÜNH NH√ÇN T√ÅI KH√ÅM</p>
                            <p className="stat-number">5</p>
                        </div>
                    </div>
                    <h4>B·ªÜNH NH√ÇN H√îM NAY</h4>
                    <div className="patient-list">
                        {[...Array(5)].map((_, index) => (
                            <div key={index} className="patient-item">
                                <div className="patient-icon">üë§</div>
                                <div className="patient-info">
                                    <p className="patient-name">Huy ƒê·ªó</p>
                                    <p className="appointment-type">KH√ÅM RƒÇNG</p>
                                </div>
                                <div className="appointment-time">10:00 SA</div>
                            </div>
                        ))}
                    </div>
                </section>
            </aside>

            <main className="dashboard__main-content">
                <section className="calendar">
                    <header className="calendar-header">
                        <h3>L·ªäCH KH√ÅM B·ªÜNH TU·∫¶N</h3>
                        <div className="calendar-navigation">
                            <button>‚óÄ</button>
                            <span>November</span>
                            <button>‚ñ∂</button>
                        </div>
                    </header>
                    <div className="calendar-body">
                        <table className="schedule-table">
                            <thead>
                                <tr>
                                    <th>Th·ª© 2</th>
                                    <th>Th·ª© 3</th>
                                    <th>Th·ª© 4</th>
                                    <th>Th·ª© 5</th>
                                    <th>Th·ª© 6</th>
                                    <th>Th·ª© 7</th>
                                </tr>
                            </thead>
                            <tbody>
                                {hours.map((hour, hourIndex) => (
                                    <tr key={hourIndex}>
                                        {scheduleGrid.map((day, dayIndex) => {
                                            const appointment = day[hourIndex];
                                            return (
                                                appointment ? (
                                                    <td
                                                        key={dayIndex}
                                                        className={`appointment ${appointment.status.toLowerCase().replace(' ', '-')}`}
                                                        onMouseEnter={(e) => handleMouseEnter(e, appointment)}
                                                        onMouseLeave={handleMouseLeave}
                                                        onClick={(e) => handleClick(e, appointment)}
                                                    >
                                                        <div className="appointment-content">
                                                            <p>{appointment.appointment_date}</p>
                                                            <p>{hour}</p>
                                                            <span>{appointment.user_id}</span>
                                                        </div>
                                                    </td>
                                                ) : (
                                                    <td key={dayIndex}></td>
                                                )
                                            );
                                        })}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>

                    {hoveredAppointment && (
                        <div
                            className="popup"
                            style={{
                                top: `${popupPosition.top}px`,
                                left: `${popupPosition.left}px`
                            }}
                        >
                            <h4>{hoveredAppointment.title}</h4>
                            <p><strong>Patient's Note:</strong> {hoveredAppointment.note}</p>
                            <div className="attendance-time">
                                <span>üóìÔ∏è {hoveredAppointment.appointment_date}</span>
                                <span>‚è∞ {hoveredAppointment.time}</span>
                            </div>
                            <div className="patient-name">
                                <img src="https://via.placeholder.com/24" alt="Patient" />
                                <span>{hoveredAppointment.patientName}</span>
                            </div>
                        </div>
                    )}
                </section>
            </main>
        </div>
    );
};

export default DashboardLayout;
